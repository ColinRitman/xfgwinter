{
  "allowed_commands": {
    "file_operations": [
      "ls",
      "ls -la", 
      "find",
      "tree",
      "cp",
      "mv",
      "rm",
      "mkdir",
      "rmdir",
      "cat",
      "head",
      "tail",
      "grep",
      "sed",
      "awk",
      "touch",
      "chmod",
      "chown"
    ],
    "development": [
      "rustc",
      "cargo",
      "rustup",
      "cargo build",
      "cargo test",
      "cargo check",
      "cargo fmt",
      "cargo clippy",
      "python",
      "python3",
      "pip",
      "git status",
      "git log",
      "git diff",
      "git add",
      "git commit",
      "git push",
      "git pull"
    ],
    "monitoring": [
      "ps",
      "top",
      "htop",
      "tail -f",
      "watch",
      "df",
      "du",
      "free"
    ],
    "network": [
      "curl",
      "wget",
      "ping",
      "ssh",
      "scp",
      "rsync"
    ],
    "security": [
      "openssl",
      "gpg",
      "cargo audit",
      "cargo-geiger"
    ]
  },
  "allowed_tools": {
    "rust_ecosystem": [
      "cargo",
      "rustc", 
      "rustup",
      "clippy",
      "rustfmt"
    ],
    "python_ecosystem": [
      "python",
      "pip",
      "virtualenv"
    ],
    "git_ecosystem": [
      "git",
      "github-cli"
    ],
    "monitoring": [
      "htop",
      "iotop",
      "fswatch"
    ],
    "data_processing": [
      "jq",
      "awk",
      "sed",
      "grep"
    ]
  },
  "project_specific": {
    "xfg_stark_commands": [
      "cargo run --bin winterfell",
      "cargo test --features stark",
      "cargo run --bin proof-generator",
      "cargo run --bin proof-verifier",
      "cargo fmt",
      "cargo clippy --fix",
      "cargo test --verbose",
      "cargo bench"
    ],
    "cryptographic_tools": [
      "openssl",
      "gpg",
      "sha256sum",
      "cryptsetup",
      "luks"
    ],
    "security_scanning": [
      "bandit",
      "safety",
      "cargo audit",
      "rustsec",
      "cargo-geiger"
    ]
  },
  "priority_commands": {
    "critical_for_xfg_stark": [
      "cargo",
      "rustc",
      "clippy",
      "rustfmt",
      "git status",
      "git log",
      "git diff",
      "git add",
      "git commit",
      "git push",
      "git pull",
      "ls",
      "find",
      "grep",
      "cat",
      "ps",
      "kill",
      "nohup",
      "tail -f",
      "watch",
      "htop",
      "curl",
      "wget",
      "cargo audit"
    ]
  },
  "safety_rules": {
    "environment_isolation": {
      "description": "All agents must operate in isolated sandbox environments",
      "enforced": true,
      "severity": "CRITICAL"
    },
    "no_deletion": {
      "description": "NO files or folders can be deleted from original XFG Winterfell code",
      "enforced": true,
      "severity": "CRITICAL"
    },
    "no_modification": {
      "description": "NO modification of original XFG Winterfell proof/verifier integration code",
      "enforced": true,
      "severity": "CRITICAL"
    },
    "copy_only": {
      "description": "All changes must be made on COPIES only",
      "enforced": true,
      "severity": "CRITICAL"
    },
    "audit_trail": {
      "description": "All operations must be logged in audit trail",
      "enforced": true,
      "severity": "HIGH"
    },
    "checksum_verification": {
      "description": "File integrity must be verified before any operation",
      "enforced": true,
      "severity": "CRITICAL"
    }
  },
  "protected_paths": {
    "critical_protection": [
      "agents/",
      "coordination/",
      "checkpoints/",
      "security-review/",
      "validation/",
      "**/*.rs",
      "**/*.toml",
      "**/*.lock",
      "**/*.md",
      "**/*.txt",
      "**/*.json",
      "**/*.yaml",
      "**/*.yml",
      ".git/",
      ".gitignore",
      "**/proof*",
      "**/verifier*",
      "**/stark*",
      "**/winterfell*"
    ]
  },
  "agent_sandbox_structure": {
    "sandbox_directories": [
      "working/",
      "copies/",
      "output/",
      "logs/"
    ],
    "isolation_level": "CRITICAL",
    "description": "Each agent operates in its own isolated sandbox environment"
  },
  "usage_notes": {
    "elite_developer_standards": "All agents act as elite senior developers with expert cryptography and Rust knowledge",
    "cryptographic_grade": "All operations maintain cryptographic-grade security standards",
    "production_ready": "All code quality standards must meet production-ready requirements",
    "stark_proof_expertise": "All agents have expert-level knowledge of STARK proofs and zero-knowledge protocols",
    "rust_excellence": "All Rust code must meet excellence standards for memory safety and performance"
  }
}
